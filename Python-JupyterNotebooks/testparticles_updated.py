# -*- coding: utf-8 -*-
"""Testparticles.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dic-O4_M3blV-LIHVd7O3fLSGic0NVA6
"""

# !pip install rebound

"""## Importing Libraries

"""

import rebound
import numpy as np
import matplotlib.pyplot as plt
import matplotlib
import math
from rebound import hash as h
import csv

"""## Initial setup of system"""

def simsetup():
  print("Active bodies only: Star and Planet")
  sim = rebound.Simulation()
  sim.units = ['Yr2pi','AU','Msun']             
  sim.add(m=1,hash="Sagarmatha")
  sim.add(m=0.0009543,a=1,e=0.36,hash="Laligurans")
  sim.move_to_com()
  sim.integrator = "ias15"
  sim.status()  
  return sim

"""## Adding test particles"""

def simtestparticles():
  sim = simsetup()
  # grid points along an axis
  Ngrid = 100    # 100 * 100 = 10000 particles
  par_a = np.linspace(0.005,0.1,Ngrid)  # semi-major axis values : 0.005 to 0.1
  par_e = np.linspace(0.00005,0.9,Ngrid)  # eccentricity values  : 0.00005 to 0.9
  parameters = []
  for e in par_e:
    for a in par_a:
      #random true anomaly f=np.random.rand()*2.*np.pi if needed
      M = np.random.rand()*2.*np.pi  # Random mean anomaly if needed 
      #M = 0
      parameters.append((a,e,M))     # Smaxis, Ecc, MeanAnomaly

  # Number of particles: Set the number of grid points above    
  N_particles = Ngrid * Ngrid        
  
  # Uncomment if inspection needed
  print("Adding test particles")
  print("Smaxis, Ecc, Mean Anomaly, Hash, C_uint")
  print("-"*30)

  # Dynamic list to store hashes of test particles stable till current timestep
  stabletp = []  

  # Adding the test particles   
  for pid,par in enumerate(parameters):
    print(par[0],par[1],par[2],f'tp{pid+1}',h(f'tp{pid+1}'))
    stabletp.append(f'tp{pid+1}')
    # mass of test particle is set to 0 by default
    sim.add(a=par[0],e=par[1],inc=0.00005,M=par[2],primary=sim.particles[1],hash=f'tp{pid+1}')  
  sim.N_active = 2   # Number of active particles in the simulation
  print("-"*30)
  return sim, stabletp, parameters, N_particles    
  # for global scope of stabletp, parameters and N_particles

"""## Setup the Test Particles' Simulation"""

sim, stabletp, parameters, N_particles = simtestparticles()
print("Before simulation")
sim.status()

print("Hashes of all stable test particles at the start of simulation")
print(stabletp)
print(len(parameters))

"""## Running the Test Particles' Simulation """

fulltime = 100000.*2.*np.pi    # Fulltime of the simulation: 100000 years
N_times = 1000               # Number of snapshots: 1000, snapshot every 100000/1000 = 100 years

## Only if simulation archive needed
#cadence = fulltime/10        #10 archive snapshots 
#sim.automateSimulationArchive("archive.bin",interval=cadence,deletefile=True)


### Arrays for orbital parameters of test particles
xy = np.zeros((N_times, N_particles , 2))
ecc = np.zeros((N_times, N_particles))
smaxis = np.zeros((N_times, N_particles))
inc = np.zeros((N_times, N_particles))

### Array of time points of snapshots
times = np.linspace(0, fulltime, N_times)

### Dynamic lists for hashes and ejection times of ejected test particles
ejectedtp = []
ejecttimes = []

### Run the simulation
for i, time in enumerate(times):
      sim.integrate(time)
      ejectlist = []
      for j,pid in enumerate(stabletp):
          # Test particle
          tparticle = sim.particles[pid]  
          # Corresponding column in time-series numpy array
          column = int(pid[2:])-1   
          eject = None    
          orbit = tparticle.calculate_orbit(primary=sim.particles["Laligurans"])
          ### Ejection or Collision checks
          if orbit.a > 0.2:
            print(f'a={orbit.a} > 0.2 AU',pid, tparticle.hash)
            ejectlist.append(pid)
            eject = True
          else: 
            eject = False  
          if orbit.e > 1:
            print(f'e={orbit.e} > 1',pid, tparticle.hash)
            ejectlist.append(pid) 
            eject = True
          else: 
            eject = False   
          ### Not ejected: Continue simulations for the particle
          ### Store values of orbital parameters
          if eject == False:
            ecc[i][column] = orbit.e
            smaxis[i][column] = orbit.a
            inc[i][column] = orbit.inc  
            xy[i][column] = [(sim.particles[1]-tparticle).x,(sim.particles[1]-tparticle).y]     

      ### Ejected: remove from simulation    
      for ejpid in ejectlist:
        print("Ejected particle", ejpid,"at time:", time)
        ejecttimes.append(time)
        ejectedtp.append(ejpid)
        stabletp.remove(ejpid)
        sim.remove(hash = ejpid)
      print("Currently stable test particles:",stabletp,"at time:",time)

"""## Lifetimes of Test particles"""

### Array of lifetimes of test particles
lifetimes = np.zeros(N_particles)

print("Hashes of all ejected particles")
print(ejectedtp)
print("Ejected times")
print(ejecttimes)
print("Hashes of all particles which remained stable till the end of simulation")
print(stabletp)

for stp in stabletp:
  index = int(stp[2:]) -1
  lifetimes[index] = fulltime
for etp in ejectedtp:
  index = int(etp[2:]) -1
  lifetimes[index] = ejecttimes[ejectedtp.index(etp)]

#lifetimes

"""## Maximum values of Semi-major axis, Eccentricity and Inclination for test particles"""

eccmax = np.amax(ecc,axis=0)  # maximum of 2D numpy array along column; axis = 0
# column = eccentricity time series of each test particle
smaxismax = np.amax(smaxis,axis=0) # array of maximum semi-major axis of each test particle
incmax = np.amax(inc,axis=0) # array of maximum inclination of each test particle

"""## Maximum Eccentricity map"""

fig = plt.figure(figsize=(7,5))
ax = plt.subplot(111)
extent = [0.005,0.1,0,0.9]
ax.set_xlim(extent[0],extent[1])

N_plotgrid = int(np.sqrt(N_particles))
eccmax2d = eccmax.reshape(N_plotgrid,N_plotgrid)
ax.set_xlabel("Semi-major axis ($au$)", fontsize=20)
ax.set_ylim(extent[2],extent[3])
ax.set_ylabel("Eccentricity ($e$)", fontsize=20)

#plt.yticks([0.2,0.4,0.6,0.8,1.0], fontsize = 20)
#plt.xticks([0.0, 0.01, 0.02,0.03,0.04],fontsize = 20)
ax.tick_params(axis='both', direction='in',length = 4.0, width = 4.0,grid_alpha=0)   #grid_alpha=0 transparent
    
#plt.text(0.02,1.01,r'Critical semi-major axis $a_{crit}$')
#ax.axvline(0.023,0.0,1,linestyle='--',linewidth=3,color='white')

im = ax.imshow(eccmax2d, interpolation="none", vmin=0, vmax=1, cmap="cividis", origin="lower", aspect='auto', extent=extent)
cb = plt.colorbar(im, ax=ax) 
cb.set_label("Maximum Eccentricity $e_{max}$",fontsize=20)
plt.savefig('maxeccmap.png',bbox_inches='tight')

"""## Maximum Lifetime map"""

fig = plt.figure(figsize=(7,5))
ax = plt.subplot(111)
extent = [0.005,0.1,0,0.9]
ax.set_xlim(extent[0],extent[1])

N_plotgrid = int(np.sqrt(N_particles))
lifetimes2d = lifetimes.reshape(N_plotgrid,N_plotgrid)
lifetimes2d = lifetimes2d/(2*np.pi)
ax.set_xlabel("Semi-major axis ($au$)", fontsize=20)
ax.set_ylim(extent[2],extent[3])
ax.set_ylabel("Eccentricity ($e$)", fontsize=20)

ax.tick_params(axis='both', direction='in',length = 4.0, width = 4.0,grid_alpha=0)   #grid_alpha=0 transparent


im = ax.imshow(lifetimes2d, interpolation="none", vmin=0, vmax=np.max(lifetimes2d), cmap="YlGn", origin="lower", aspect='auto', extent=extent)
cb = plt.colorbar(im, ax=ax) 
cb.set_label("Lifetime (Yr)",fontsize=20)
plt.savefig('lifetimemap.png',bbox_inches='tight')

"""## Write to CSV file"""

filename = 'testparticles.csv'
with open(filename,'w') as csvfile:
  writer = csv.writer(csvfile,delimiter=',')
  writer.writerow(['Smaxis','InitialEcc','MeanAnomaly','MaxEcc','Lifetime','MaxInc','MaxSmaxis'])
  for i, parameter in enumerate(parameters):
    print(i,parameter[0],parameter[1],parameter[2],eccmax[i],lifetimes[i],incmax[i],smaxismax[i])
    writer.writerow([parameter[0],parameter[1],parameter[2],eccmax[i],lifetimes[i],incmax[i],smaxismax[i]])

